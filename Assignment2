                              ASSIGNMENT ----- 2 WITH PYTHON

Answer ------ 1

def arrayPairSum(nums):
    nums.sort()
    max_sum = 0
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
    return max_sum
nums = [1, 4, 3, 2]
print(arrayPairSum(nums))
        
        
        
  Answer ---- 2      

def distributeCandies(candyType):
    unique_candies = set(candyType)
    max_candies = len(candyType) // 2
    return min(len(unique_candies), max_candies)
candyType = [1, 1, 2, 2, 3, 3]
print(distributeCandies(candyType))


Answer ------- 3

def findLHS(nums):
    freq = {}
    for num in nums:
        freq[num] = freq.get(num, 0) + 1

    max_length = 0
    for num in freq:
        if num + 1 in freq:
            max_length = max(max_length, freq[num] + freq[num + 1])

    return max_length
nums = [1, 3, 2, 2, 5, 2, 3, 7]
print(findLHS(nums))


Answer -------- 4 

def canPlaceFlowers(flowerbed, n):
    count = 0
    size = len(flowerbed)
    for i in range(size):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == size - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1
    return count >= n
flowerbed = [1, 0, 0, 0, 1]
n = 1
print(canPlaceFlowers(flowerbed, n))


Answer ------ 5 

def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    product1 = nums[n - 1] * nums[n - 2] * nums[n - 3]
    product2 = nums[0] * nums[1] * nums[n - 1]
    return max(product1, product2)
nums = [1, 2, 3]
print(maximumProduct(nums))

Answer ------ 6

def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
nums = [-1, 0, 3, 5, 9, 12]
target = 9
print(search(nums, target))

    return -1
    
nums = [-1, 0, 3, 5, 9, 12]
target = 9
print(search(nums, target))



Answer ------ 7


def isMonotonic(nums):
    isIncreasing = True
    isDecreasing = True
    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            isDecreasing = False
        elif nums[i] < nums[i - 1]:
            isIncreasing = False
        if not isIncreasing and not isDecreasing:
            return False
    return True
nums = [1, 2, 2, 3]
print(isMonotonic(nums))


Answer ------ 8

def minimumScore(nums, k):
    min_num = min(nums)
    max_num = max(nums)
    if max_num - min_num <= 2 * k:
        return 0
    return max_num - min_num - 2 * k
nums = [1]
k = 0
print(minimumScore(nums, k))
nums = [1]
k = 0
print(minScore(nums, k))



