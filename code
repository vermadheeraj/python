// answer 1 --->

def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0
    
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
    
    return max_sum
    
    Using the given example nums = [1, 4, 3, 2], the function call arrayPairSum(nums) will return 4, which is the maximum possible sum.
    
// answer 5 ---->

def maximumProduct(nums):
    nums.sort()  
    n = len(nums)
    
    return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1])
Using the given example nums = [1, 2, 3], the function call maximumProduct(nums) will return 6, which is the maximum product of three numbers.


// answer 2---->

def distributeCandies(candyType):
    unique_candies = set(candyType)
    return min(len(unique_candies), len(candyType) // 2)
Using the given example candyType = [1, 1, 2, 2, 3, 3], the function call distributeCandies(candyType)
will return 3, which is the maximum number of different types of candies Alice can eat.

// answer 3 ----->

def findLHS(nums):
    num_counts = {}
    
    for num in nums:
        if num in num_counts:
            num_counts[num] += 1
        else:
            num_counts[num] = 1
    
    max_length = 0
    
    for num in num_counts:
        if num + 1 in num_counts:
            max_length = max(max_length, num_counts[num] + num_counts[num + 1])
    
    return max_length
Using the given example nums = [1, 3, 2, 2, 5, 2, 3, 7], the function call findLHS(nums)
will return 5, which is the length of the longest harmonious subsequence [3, 2, 2, 2, 3].

// answer 4 ----->

def canPlaceFlowers(flowerbed, n):
    count = 0
    length = len(flowerbed)
    i = 0
    
    while i < length:
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == length - 1 or flowerbed[i + 1] == 0):
            count += 1
            flowerbed[i] = 1
        i += 1
    
    return count >= n
    
    Using the given example flowerbed = [1, 0, 0, 0, 1] and n = 1, the function call canPlaceFlowers(flowerbed, n) will return True,
    indicating that one new flower can be planted in the flowerbed without violating the no-adjacent-flowers rule.

// answer 6 ---->

def search(nums, target):
    left = 0
    right = len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    
    return -1
    
    Using the given example nums = [-1, 0, 3, 5, 9, 12] and target = 9, the function call search(nums, target) will return 4, 
    indicating that the target value 9 exists in the array and its index is 4.







